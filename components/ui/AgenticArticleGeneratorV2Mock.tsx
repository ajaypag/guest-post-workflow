'use client';

import React, { useState, useEffect, useRef } from 'react';
import { Play, AlertCircle, Bug, CheckCircle } from 'lucide-react';

interface AgenticArticleGeneratorV2MockProps {
  workflowId: string;
  outline: string;
  onComplete: (article: string) => void;
  onGeneratingStateChange?: (isGenerating: boolean) => void;
}

export const AgenticArticleGeneratorV2Mock = ({ 
  workflowId, 
  outline, 
  onComplete, 
  onGeneratingStateChange 
}: AgenticArticleGeneratorV2MockProps) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [progress, setProgress] = useState(0);
  const [logs, setLogs] = useState<string[]>([]);
  const [mockArticle, setMockArticle] = useState('');
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  // Report generating state changes to parent
  useEffect(() => {
    onGeneratingStateChange?.(isGenerating);
  }, [isGenerating, onGeneratingStateChange]);

  const addLog = (message: string, isError = false) => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prev => [...prev, `${timestamp}: ${isError ? '❌ ' : ''}${message}`]);
    console.log(`[MOCK V2] ${message}`);
  };

  const simulateGeneration = async () => {
    setIsGenerating(true);
    setProgress(0);
    setLogs([]);
    addLog('🧪 MOCK MODE: Starting simulated V2 generation...');
    addLog(`Workflow ID: ${workflowId}`);
    addLog(`Outline length: ${outline.length} characters`);

    // Simulate progress
    let currentProgress = 0;
    intervalRef.current = setInterval(() => {
      currentProgress += 10;
      setProgress(currentProgress);
      
      if (currentProgress === 20) {
        addLog('📋 Mock: Creating article structure...');
      } else if (currentProgress === 40) {
        addLog('✍️ Mock: Writing introduction...');
      } else if (currentProgress === 60) {
        addLog('📝 Mock: Writing main sections...');
      } else if (currentProgress === 80) {
        addLog('🔚 Mock: Writing conclusion...');
      } else if (currentProgress >= 100) {
        // Complete the generation
        clearInterval(intervalRef.current!);
        
        const mockContent = `# Mock Article Generated by V2 Test Mode

## Introduction
This is a MOCK article generated for testing purposes. The real V2 agent would generate actual content here.

**Generated at:** ${new Date().toISOString()}
**Workflow ID:** ${workflowId}
**Outline provided:** Yes (${outline.length} characters)

## Section 1: Testing Auto-Save
This section tests whether the auto-save functionality works correctly when content is generated by the AI agent.

### Key Points:
- The article should trigger auto-save when completed
- The navigation guard should protect unsaved changes
- The content should persist when switching tabs

## Section 2: Diagnostic Information
- Is the onChange callback being called? Check console logs
- Is the auto-save timer triggering? Check after 2 seconds
- Is the data being sent to the server? Check network tab

## Section 3: Lorem Ipsum Content
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.

Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

## Conclusion
This mock article has been generated to test the save functionality. Total word count: approximately 200 words.

---
*This is a MOCK article for testing purposes only.*`;

        setMockArticle(mockContent);
        addLog('✅ Mock generation complete!');
        addLog(`📊 Mock article length: ${mockContent.length} characters`);
        
        // Critical: Call onComplete to trigger the save flow
        addLog('🔄 Calling onComplete callback...');
        onComplete(mockContent);
        
        setIsGenerating(false);
        addLog('✅ onComplete callback executed');
      }
    }, 500); // Update every 500ms
  };

  const stopGeneration = () => {
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
    }
    setIsGenerating(false);
    addLog('⏹️ Mock generation stopped by user');
  };

  useEffect(() => {
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, []);

  return (
    <div className="bg-yellow-50 border-2 border-yellow-400 rounded-xl p-6 space-y-6">
      {/* Header with warning */}
      <div className="bg-yellow-100 border border-yellow-500 rounded-lg p-4">
        <div className="flex items-center space-x-2">
          <Bug className="w-5 h-5 text-yellow-700" />
          <h3 className="text-lg font-semibold text-yellow-900">V2 Mock Test Mode</h3>
        </div>
        <p className="text-sm text-yellow-800 mt-1">
          This is a test version that simulates the V2 agent without making API calls. 
          Use this to debug save/display issues.
        </p>
      </div>

      {/* Controls */}
      <div className="flex items-center justify-between">
        <div className="text-sm text-gray-600">
          <p>This will generate a mock article and test the save flow.</p>
          <p className="font-semibold">Watch the console for diagnostic logs!</p>
        </div>
        
        {!isGenerating ? (
          <button
            onClick={simulateGeneration}
            disabled={!outline.trim()}
            className="flex items-center space-x-2 px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <Play className="w-4 h-4" />
            <span>Start Mock Generation</span>
          </button>
        ) : (
          <button
            onClick={stopGeneration}
            className="flex items-center space-x-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700"
          >
            <AlertCircle className="w-4 h-4" />
            <span>Stop Mock</span>
          </button>
        )}
      </div>

      {/* Progress */}
      {isGenerating && (
        <div className="space-y-2">
          <div className="flex justify-between text-sm">
            <span>Mock Progress</span>
            <span>{progress}%</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className="bg-yellow-600 h-2 rounded-full transition-all duration-500"
              style={{ width: `${progress}%` }}
            />
          </div>
        </div>
      )}

      {/* Diagnostic Logs */}
      <div className="space-y-2">
        <h4 className="font-medium text-gray-900">Diagnostic Logs</h4>
        <div className="bg-gray-900 text-green-400 text-xs p-3 rounded-lg max-h-60 overflow-y-auto font-mono">
          {logs.length === 0 ? (
            <div className="text-gray-500">No logs yet. Start mock generation to see diagnostic information.</div>
          ) : (
            logs.map((log, index) => (
              <div key={index} className="mb-1">{log}</div>
            ))
          )}
        </div>
      </div>

      {/* Mock Article Preview */}
      {mockArticle && (
        <div className="space-y-2">
          <div className="flex items-center space-x-2">
            <CheckCircle className="w-5 h-5 text-green-600" />
            <h4 className="font-medium text-gray-900">Mock Article Generated</h4>
          </div>
          <div className="bg-white border border-gray-200 rounded-lg p-4 max-h-40 overflow-y-auto">
            <pre className="text-xs whitespace-pre-wrap">{mockArticle.substring(0, 500)}...</pre>
          </div>
          <p className="text-xs text-gray-600">
            The full article ({mockArticle.length} characters) should now be saved in the fullArticle field.
            Try switching tabs or navigating away to test if it persists.
          </p>
        </div>
      )}

      {/* Instructions */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h4 className="font-medium text-blue-900 mb-2">Testing Instructions:</h4>
        <ol className="text-sm text-blue-800 space-y-1 list-decimal list-inside">
          <li>Click "Start Mock Generation" to simulate the V2 agent</li>
          <li>Watch the console (F12) for detailed diagnostic logs</li>
          <li>After completion, check if the article appears in the "Full Article" field</li>
          <li>Try switching tabs - you should get a warning about unsaved changes</li>
          <li>Navigate away and come back to see if the data persists</li>
          <li>Check the Network tab to see if auto-save requests are being made</li>
        </ol>
      </div>
    </div>
  );
};